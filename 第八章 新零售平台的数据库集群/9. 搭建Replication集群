之前已经搭建了两个PXC集群，这还远远不够，因为PXC集群适合保存高价值的数据，如果把大量低价值的数据也保存到PXC集群，就会显得很浪费，白白浪费了PXC有限的数据同步资源

Replication集群简介
	1.Replication集群是MySQL自带的数据同步机制
	2.MySQL通过读取、执行另一个MySQL的bin_log日志，实现数据同步
		开启MySQL的bin_log日志，然后所有使用MySQL的操作都会被记录在这个日志文件中，另外一个MySQL通过读取bin_log文件就会知道第一个MySQL节点执行了哪些操作，而且第二个MySQL还会把这些操作在本地也执行一遍，因为执行的操作都是相同的，所以两个MySQL的内容就完全相同了

主从关系同步
	Replication集群中，数据同步是单向的，从主节点(Master)同步到从节点(Slave)
		开启了bin_log的节点称为主节点，读取bin_log日志的节点叫做从节点
		如果业务系统时读多写少非常严重，那么可以给一个Master节点设置更多的Slave节点

下载安装Replication镜像
	Oracle并没有提供官方的Replication镜像，所以我们只能安装第三方封装的镜像文件
	1.docker pull mishamx/mysql   	下载安装replication镜像
	2.docker tag mishamx/mysql rep 	给镜像取名
	3.docker rmi mishamx/mysql 		删除原来的镜像

Relication集群的结构(示例)
	虚拟机 			IP地址 			端口      容器    	数据卷
	虚拟机1	   192.168.99.241 		9003	  rn1(m)     rnv1
	虚拟机2	   192.168.99.195		9003      rn2(s) 	 rnv2
	虚拟机3	   192.168.99.201		9003      rn3(s)     rnv3
	虚拟机4 	   192.168.99.178 		9003      rn4(s)     rnv4

只有两个虚拟机
	集群1
		虚拟机 		   	  IP  			 端口 		容器 		数据卷
		虚拟机1    192.168.204.130  		 9003		rn1  		rnv1
		虚拟机2    192.168.204.131  		 9003		rn2  		rnv2
	集群2
		虚拟机 			IP地址 			端口      容器    	数据卷
		虚拟机1    192.168.204.130  		 9004	  rn3    	rnv3
		虚拟机2    192.168.204.131  		 9004	  rn4   	rnv4
	搭建集群2命令：
		主：docker run -d -p 9004:3306 --name rn3 -e MYSQL_MASTER_PORT=3306 -e MYSQL_ROOT_PASSWORD=XXX -e MYSQL_REPLICATION_USER=backup -e MYSQL_REPLICATION_PASSWORD=backup123 -v rnv3:/var/lib/mysql --privileged --net=swarm_mysql rep
		从：docker run -d -p 9004:3306 --name rn4 -e MYSQL_MASTER_HOST=rn3 -e MYSQL_MASTER_PORT=3306 -e MYSQL_ROOT_PASSWORD=XXX -e MYSQL_REPLICATION_USER=backup -e MYSQL_REPLICATION_PASSWORD=backup123 -v rnv4:/var/lib/mysql --privileged --net=swarm_mysql rep
		(注意：将MYSQL_ROOT_PASSWORD的值进行替换，还有 --name 容器名 以及-v 数据卷:/var/lib/mysql
		从节点还需将MYSQL_MASTER_HOST的值(主服务器节点)进行替换)

必须等到主节点的容器启动起来，才能去创建从节点的容器

若创建时 参数错误，先docker stop 容器ID ，再docker rm 容器ID
创建主节点容器
	主节点用来让其他节点与之同步，而且主节点身份是固定的
		docker run -d -p 9003:3306 --name rn1
		-e MYSQL_MASTER_PORT=3306
		-e MYSQL_ROOT_PASSWORD=abc123456
		-e MYSQL_REPLICATION_USER=backup
		-e MYSQL_REPLICATION_PASSWORD=backup123
		-v rnv1:/var/lib/mysql --privileged
		--net=swarm_mysql rep
		如： docker run -d -p 9003:3306 --name rn1 -e MYSQL_MASTER_PORT=3306 -e MYSQL_ROOT_PASSWORD=XXX -e MYSQL_REPLICATION_USER=backup -e MYSQL_REPLICATION_PASSWORD=backup123 -v rnv1:/var/lib/mysql --privileged --net=swarm_mysql rep
		(注意：将MYSQL_ROOT_PASSWORD的值进行替换，还有 --name 容器名 以及-v 数据卷:/var/lib/mysql)

创建从节点(需保证主节点可正常访问)
	从节点需要与主节点同步数据，没有主节点不能创建从节点
	docker run -d -p 9003:3306 --name rn2
	-e MYSQL_MASTER_HOST=rn1
	-e MYSQL_MASTER_PORT=3306
	-e MYSQL_ROOT_PASSWORD=abc123456
	-e MYSQL_REPLICATION_USER=backup
	-e MYSQL_REPLICATION_PASSWORD=back123
	-v rnv2:/var/lib/mysql --privileged
	--net=swarm_mysql rep
	(区别在于-e MYSQL_MASTER_HOST=rn1 , 由于是在同一虚拟网络，所以不会发生冲突)
	如： docker run -d -p 9003:3306 --name rn2 -e MYSQL_MASTER_HOST=192.168.204.130 -e MYSQL_MASTER_PORT=3306 -e MYSQL_ROOT_PASSWORD=XXX -e MYSQL_REPLICATION_USER=backup -e MYSQL_REPLICATION_PASSWORD=backup123 -v rnv2:/var/lib/mysql --privileged --net=swarm_mysql rep

	创建完主节点之后 连接查询 show master status;  (查看File 的 mysql-bin.xxx的值
	创建完从节点之后 连接查询 show slave status; (查看Master_Log_File 他和上面的值一样就好了
			Slave_IO_State  值为 Waiting for master to send event是就ok了

现在已经能进行同步了

若不能同步，解决步骤：
	1.docker volume inspect rnv1(数据卷名)
	2.cd /var/lib/docker/volumes/rnv1 进入这个目录 将原来的创建的文件删除
	3.删完之后，再将需要的目录创建出来 /_data
	4.如果刚创建的不好使，再将其删掉，然后重新执行一遍


	