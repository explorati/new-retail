PXC集群注意事项
	虚拟机 			IP地址 			端口      容器    数据卷
	虚拟机1	   192.168.99.241 		9001	  pn1     pnv1
	虚拟机2	   192.168.99.195		9001      pn2 	  pnv2
	虚拟机3	   192.168.99.201		9001      pn3     pnv3
	虚拟机4 	   192.168.99.178 		9001      pn4     pnv4

	因为将来会创建很多容器，所以建议画一个表格，将每个虚拟机里面部署什么样的容器、映射端口写清楚

1.从节点启动后闪退(一)
	1.如果主节点没有完全启动成功，从节点就会闪退
***	2.PXC最后退出的节点要最先启动，而且要按照主节点启动
		PXC认为最后退出的节点保存的数据是最新的，所以这个节点也应最先启动，然后把其他节点启动，从节点就会自动跟主节点同步到最新的数据
		PXC集群会给最后退出的节点打上标记，等待启动PXC集群时，他会检查第一个启动的节点，有没有打上的标记。如果没有，就会禁止这个容器启动，就会出现闪退

		例子：
			如PXC集群是由A、B两个节点组成的，当创建容器时，A是主节点，B是从节点。当PXC集群启动之后就没有主从之分了，A、B两个节点的地位是相同的，当把A节点停掉，之后再把B节点停掉。注意B节点是最后停掉的节点。那么恢复PXC集群运行时，应该先启动B节点，但是B节点启动时闪退，原因？
				因为Docker不能更换容器启动命令，所以B节点无法按照主节点启动。  当初我们给B节点设置的参数是让他按照从节点来启动，我们现在不能更改B的参数，他只能按照从节点的方式启动，所以他一定会闪退
***			解决办法：
				方法1.修改grastate.dat文件，把safe_to_bootstrap参数改成0
				(saft_to_bootstrap等于1，代表该节点是最后退出的节点，需按照主节点启动)
				方法2.删掉A、B两个容器，按照主节点方式再创建两个容器，将原来B节点的数据卷挂载到新主容器上即可，然后再创建一个A节点的容器，将原来A节点的数据卷挂载到这个从节点的容器上就可以了。

				修改grastate.dat文件步骤：
					1.docker volume inspact 容器名  找到数据卷目录
					2.进入数据卷目录 如 cd /var/lib/docker/volumes/pnv2/_data
**					3.vi grastate.dat
						发现safe_to_bootstrap为0
						原因：如果直接在Linux系统上运行PXC节点，最后关闭的节点他的safe_to_bootstrap值的确为1，但是Percona公司在制作PXC镜像的时候，这个镜像里面加上了一段脚本，最后退出的如果是从节点，那么PXC不会将这个节点的safe_to_bootstrap参数设置为1，因为从节点的参数是没有以主节点的方式运行的，所以pn2节点是按照从节点的方式启动的。他闪退的原因是因为找不到主节点就闪退了。所以，只要把主节点启动起来，其他的节点就能启动了。所以需要找主节点的数据卷，进入，找到主节点的grastate.dat文件，将safe_to_bootstrap参数改为1
						保存，启动主节点 docker start pn1,之后再启动从节点就行了
***	总结：使用Percona镜像时，需要将主节点的safe_to_bootstrap参数改为1，然后正常按照主节点，从节点的顺序启动就好了，否则只能使用第二种方法：删除容器，然后以挂载数据卷形式创建新容器

2.主节点启动后闪退(一)
	1.PXC启动后，所有的节点的safe_to_bootstrap都是0
	2.如果所有PXC节点同时以外关闭，所有节点safe_to_bootstrap都是0，所以主节点无法启动
	解决方案：
		1.修改grastate.dat文件，将里面的safe_to_bootstrap参数改为1

3.主节点启动闪退(二)
	1.如果PXC集群正在运行，宕机的主节点不能按照主节点启动
	解决方法：
		1.删除容器，检查safe_to_bootstrap是否为0，将其改为0
		2.以从节点方式创建容器，让这个新创建的容器与其他的节点进行同步就行了。在PXC集群中随便找一个同步的节点就可以，创建时别忘了挂载数据卷

4.加入PXC集群的注意事项
	1.可以使用任何PXC节点，然后以从节点加入PXC集群
		如：起初创建时 A为主节点，B为从节点，再想创建一个容器时，可以以B节点进行同步
	2.如果重新启动C节点，必须保证B节点可以访问，否则会出现闪退
