为什么放弃存储过程、触发器和自定义函数？(设计数据库时)
	数据库本地编程  -> 执行速度快
		存储过程 函数 触发器

	从表面上看，数据库本地编程的优点还是很突处的

	为什么要放弃数据库编程？
		在单节点的角度上看，数据库本地编程的优点盖过了缺点。
		但是换做数据库集群的环境，数据库本地编程这种技术的缺点就盖过了优点。
		1.在数据库集群场景里，因为存储过程、触发器和自定义函数，都是在本地数据库节点执行，所以无法兼容集群场景，会与集群中的数据冲突
		所以为了，顾全大局，也就放弃了数据库本地编程这种技术了，甚至说连数据库本地生成主键的机制也都放弃了

	并发访问 200左右  单节点
			2000	 数据库集群

	数据切分场景
		如在数据库集群中，商品是按照类型来切分存储的，在DB1的商品表保存的是食品数据，DB2的商品表保存的是服装数据，DB3节点里的商品表保存的是玩具数据，DB4节点中的商品表保存的是家用电器。
		MyCat是用来管理数据库集群的一个中间件产品，MyCat就是一个SQL语句的路由器，我们把SQL语句传递给MyCat，他会判断商品是什么类型的，如果是玩具类型，MyCat就会把SQL语句发给DB3去执行；如果MyCat判断是服装，就会把SQL语句发送给DB2节点去执行。
		加入我们在每一个节点上都创建了存储过程，封装了商品数据的插入，我们把调用存储过程的语句发送给MyCat，MyCat无法从语句里面分析出要插入商品的类型，所以也就不知道将SQL语句发送给哪一个Mysql节点去执行，所以数据切分存储就这个失效了。
		数据库本地编程和数据库集群还是有冲突的。大公司都是用的集群技术，所以要取舍的放弃本地编程

相关问题：
	1.MyCat是根据商品分类进行路由，那为什么不能根据存储类型进行路由？
		可以但是有问题，其实要实现存储过程的转发，原理也并不复杂。但是如果存储过程里面的表连接查询，使用了跨分片的表连接，该怎么办呢？所以更多的时候，还是不建议使用存储过程了
	2.Oracle主键类型是UUID的，为什么MySQL不行？
		Oracle数据库使用UUID主键类型是可以的，但是Mysql底层优化的并不够，所以不太建议使用UUID主键类型
	3.商业数据库的解决方案比较完整，而且售后服务工作比开源数据库好很多。单节点的Oracle缺失可以抵得上4个MySQL数据库。既然商业数据库那么好，为什么互联网行业不用Oracle呢？
		因为大规模集群的成本太高了，而且互联网数据的价值远远没有金融行业高。所以在开源数据库的基础上进行二次开发，定制一个数据库也是可以的。
