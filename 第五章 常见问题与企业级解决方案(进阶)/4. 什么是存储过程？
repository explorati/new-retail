数据库编程(注意：存储过程，函数，触发器这三者都建议放弃，即不建议使用)
	SQL脚本 ->编译 -> 二进制代码(存储过程、函数、触发器)
	存储过程：可以增删改查数据，但是执行存储过程的时候不能写在SQL语句里面，只能单独调用。
	函数：一种特殊的存储过程，只能查询并返回数据，不能单独调用，必须卸载SQL语句里
	触发器：特殊的存储过程，存储过程和函数需主动调用才能执行，而触发器不用主动调用，只要写好触发条件Mysql就会自动执行

什么是存储过程？
	存储过程是一个编译后的SQL脚本集合，可以单独调用，但是不能用在SQL语句中(可以用call 调用)

	把SQL语句封装成存储过程是为什么呢？
		如，银行的核心业务还是SQL语句处理的，但是银行有很多衍生的服务，这些衍生服务会交给一些外包公司来做。对银行来说，并不希望公布数据库的结构设计，让外包公司知道有哪些数据表，数据表里面有什么字段。于是，银行就会组织内部开发人员，编写大量的存储过程，有的是用来开户的，有的是用来转账的等。封装完了存储过程，银行只需要告诉外包公司，这些存储过程的用途，以及传入的参数和返回的结果。对于外包公司来说，无法得知数据表的设计，仅凭有效的存储过程，外包公司想对银行数据库搞破坏是很困难的。
	总结起来：存储过程主要用途是保护内部数据表的安全，防止其他人员改动或知道数据表的字段内容。封装好存储过程，对外只需要提供此存储过程的用途，需传入的参数和返回的结果就ok了。

存储过程的优点
	1.存储过程是编译过的SQL脚本，所以执行速度非常快
		调用时省去了校验SQL文件中的语法和对SQL语句进行优化的过程
	2.实现了SQL编程，可以降低锁表的时间和锁表的范围
	  可以把大的复杂的SQL语句改写成多个简单的SQL语句，降低了锁表时间
		最初的时候由于不知道在数据库中可以定义变量，所以查询出来的结果没有办法保存，只能写在SQL语句里面，于是SQL语句越写越复杂，如：子查询中：查询出来的结果没有地方保存，只能写在where子句里面，子查询就变成了相关子查询，效率更低；若是update操作使用子查询，会将表锁住很长时间。有了存储过程，可以先把查询的结果保存到变量，然后把变量写到where子句里面。效率就更高了，锁表时间更短了。
		再比如，在update语句中使用了表连接，SQL语句没有执行完，参加表连接的数据表都会被锁住
	3.对外封装了表结构，提升了数据库的安全性

编写存储过程案例
	编写存储过程，根据部门名称，查询部门用户信息
	Navicate中 函数 -> 新建函数 -> 过程 ->模式： IN  名称：`p_dname` 类型：varchar(20)
	语句：
	CREATE DEFINER=`root`@`%` PROCEDURE `p1`(IN `p_dname` varchar(20))
	BEGIN
	#Routine body goes here...
	SELECT 
		e.id, e.ename, e.sex, e.married, d.dname, j.job 
	FROM t_emp e JOIN t_dept d on e.dept_id = d.id
	JOIN t_job j on e.job_id = j.id
	where d.dname = p_dname;
	END
	运行时，传入参数 零售部  (切记：不要加引号)

调用存储过程
	在查询面板中
		CALL p1("零售部");

编写存储过程，插入实习员工数据的时候，如果是男性，就分配到网商部实习；如果是女性，就分配到零售部实习
	CREATE DEFINER=`root`@`%` PROCEDURE `p2`(IN `p_wid` varchar(20),IN `p_ename` varchar(20),IN `p_sex` char(1),IN `p_married` boolean,IN `p_education` tinyint,IN `p_tel` varchar(11))
	BEGIN
	#Routine body goes here...
	DECLARE dept_id INT;
	CASE
		WHEN p_sex = "女" THEN
			set dept_id = 3;
		ELSE 
			set dept_id = 4;
	END CASE;
	insert into `t_emp`(wid, ename, sex, married,education,tel,dept_id,hiredate, job_id, `status`,is_deleted) values(p_wid, p_ename, p_sex, p_married, p_education, p_tel, dept_id, curdate(), 9, 1, 0);
	END
	执行之后保存，在查询面板中 	
		call p2("TE0023", "陈婷婷", "女",false, 1, "13322334545");
		call p2("TE0024", "徐刚", "男",false, 1, "13322334545");
