枚举值切分
	枚举值切分是根据固定字段的枚举值来切分数据，枚举值要提前规定好，并且必须是整数类型
		枚举值切分是一种主流的切分规则，因为我们可以对数据分类存储，分类的规则就是我们事先要规定好一些枚举值，每一种枚举值对应什么分片，要记录清楚。并且枚举值类型必须是整数类型，不能用其他类型。
		如：58同城，很多业务数据都是按照城市来切分的，如租房信息、招聘信息、二手货信息，都是有明确的地域特征，所以可以按照城市来切分数据，就更加合理。一个城市、一个省份乃至一个地区的业务数据都切分存储在同一个分片上，将来做表连接的时候也更加容易，避免了跨分片的表连接查询，而且同类型的数据切分到同一个分片上面，管理起来也非常容易。
		如京东商城想砍掉某种类别的商品，可以根据商品类别做枚举值切分，一种类别的商品都存储在一个分片上，所以找到这个分片，删除这个类别目录就可以了

		主键  其他字段  	城市编号
		 1     ....        10
		 2     ....  	   24
		 3     ....       411
		根据城市编号切分，每个城市的编号可以根据每个城市的长途电话区号来判别，长途区号为整数类型，枚举值也得为整数类型，整数前面的0省略，如北京为010，就为10
		需要提前编写好txt文档，声明好每一种城市编号切分到哪一个分片上面

枚举值文件
	枚举值文件的序号从0开始，0代表第一个分片，然后依次类推
		如： 10=0 22=0 24=1 411=1

	创建步骤：
		1.进入mycat的conf
			cd /var/lib/docker/volumes/mycat1/_data/mycat/conf/
		2.创建一个空文档 如：city.txt
			10=0
			22=0
			24=1
			411=1
		3.定义算法"函数"
			首先在rule.xml文件中声明枚举值算法函数
			(1)找到rule.xml中定义的
				<function name="hash-int"
					class="io.mycat.route.function.PartitionByFileMap">
					<property name="mapFile">partition-hash-int.txt</property>
				</function>
			(2)复制一份，并修改相关字段
				<function name="partition-by-city"
					class="io.mycat.route.function.PartitionByFileMap">
					<property name="mapFile">city.txt</property>
				</function>
			io.mycat.route.function.PartitionByFileMap:用来做枚举值切分的Java类
			property：规则定义的文本文档
		4.定义数据表规则
			接下来要在rule.xml文件中声明枚举值数据表规则
				(1)随便找到一个tableRule标签，复制
					<tableRule name="sharding-by-intfile">
						<rule>
							<columns>sharding_id</columns>
							<algorithm>hash-int</algorithm>
						</rule>
					</tableRule>
				(2)修改复制的标签内容
					<tableRule name="sharding-by-city">
						<rule>
							<columns>city_id</columns>
							<algorithm>partition-by-city</algorithm>
						</rule>
					</tableRule>
				columes：代表要读书数据表中那个列的值，和枚举值定义文件中的切分规则去比较，确定分片
				algorithm：定义function标签的名字
				name：代表可以应用在虚拟表的切分规则
		5.引用切分规则
			最后要在声明虚拟表的时候引用枚举值切分规则
			(1)进入schame.xml中, 修改t2 添加虚拟表company
				<schema name="t2" checkSQLschema="false" sqlMaxLimit="100">
					<table name="teacher" dataNode="tdn3,tdn4" type="global" />
					<table name="student" dataNode="tdn3,tdn4" rule="mod-long" />
					<table name="company" dataNode="tdn3,tdn4" rule="sharding-by-city" />
				</schema>
		原本重新配置完成之后，需重启MyCat
		6.但可以用热加载
			Navicat，连接9066端口
				连接名 MyCat管理  主机: 192.168.204.130 端口：9066 用户名：admin(server.xml) 
			不要点击虚拟库，只是用来执行一些管理命令的
			右键连接名 选择命令列界面
				执行 reload @@config_all;
				提示 reload config success(此时热加载成功,如若不成功，检查上面步骤的配置)
			热加载省去了重新启动MyCat的必要
		7.在MyCat连接，t2数据库中创建虚拟表compony
			create table company(
				id int unsigned primary key,
				`name` varchar(200) not null,
				city_id smallint not null
			);
		到两个Replication集群中都可以看到这个表，因为table中dataNode节点配置
		8.在MyCat连接，t2数据库中的company表中插入数据
			id   name    city_id
			1    IBM       10
			2    Oracle    22
			3    Amazon    24
			4    Google    24
		到各个分片查看表中记录内容，rn1,rn2为city_id为10和22的，rn3,rn4为city_id为24的
		数据切分没有问题

		8.验证下SQL语句的路由情况
			explain select id, `name` from company;						全部切片
			explain select id, `name` from company where id=1;			全部切片
			explain select id, `name` from company where city_id=24;    目标切片
			explain delete from company where id=1;						全部切片
			explain delete from company where city_id=10;				目标切片

		阅读MyCat手册就能了解所有切分规则怎么定义和使用